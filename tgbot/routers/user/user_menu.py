# - *- coding: utf- 8 - *-
from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import Message

from tgbot.data.config import get_admins
from tgbot.database.db_document import Documentx
from tgbot.database.db_users import UserModel
from tgbot.keyboards.inline_admin import support_cancel_finl, support_admin_answer_finl
from tgbot.keyboards.inline_page import document_open_finl
from tgbot.utils.const_functions import send_admins
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import convert_question

router = Router(name=__name__)


################################ –†–ï–ü–õ–ê–ô –ö–ù–û–ü–ö–ò #################################
# –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.message(F.text == "üìî –î–æ–∫—É–º–µ–Ω—Ç—ã")
async def user_list_document(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()

    get_all_documents = Documentx.get_all()

    if len(get_all_documents) == 0 and User.user_id not in get_admins():
        return await message.answer("‚ùóÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç–≤—É—é—Ç")

    await message.answer(
        "<b>üìî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º</b>",
        reply_markup=document_open_finl(User.user_id, 0)
    )


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@router.message(F.text == "‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def user_support(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()

    await state.set_state("here_support_question")

    await message.answer(
        "<b>‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>\n"
             "‚ùï –î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=support_cancel_finl()
    )


#################################### –°–¢–ï–ô–¢–´ ####################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@router.message(StateFilter("here_support_question"))
async def user_support_question(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    if len(message.text) > 2000:
        return await message.answer(
            "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤</b>\n"
            "‚ùï –î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤"
        )

    await state.clear()

    await bot.delete_message(
        chat_id=User.user_id,
        message_id=message.message_id - 1
    )

    await message.answer(
        "<b>‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n</b>"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç"
    )

    await send_admins(
        bot=bot,
        text=convert_question(message.text, User.user_id),
        markup=support_admin_answer_finl(User.user_id)
    )
